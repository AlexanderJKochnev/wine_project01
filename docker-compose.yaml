# docker-compose.yaml
services:
  wine_host: # this is the name of the service and name of the host (POSTGRES_HOST)
    restart: unless-stopped
    container_name: ${POSTGRES_HOST}
    image: postgres:alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    expose:
      - "${POSTGRES_PORT}"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./pg_dump:/tmp
    networks:
      pgnetwork:
        aliases:
          - ${POSTGRES_HOST}
    healthcheck:
      test: [ "CMD", "pg_isready -h postgres_db"]
      # add -h dd in order to avoid message FATAL: role 'root' doesnot exist
      interval: 10s # 1m30s
      timeout: 10s
      retries: 5
      start_period: 40s
      start_interval: 5s
  
  minio:
    # image: quay.io/minio/minio
    image: minio/minio:latest-cicd
    container_name: minio_server
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    restart: unless-stopped
    networks:
      - pgnetwork
    env_file:
      - .env

  adminer:
    container_name: pg_admin
    image: adminer:4.8.1
    restart: unless-stopped
    environment:
      - ADMINER_PLUGINS=tables-filter enum-option enum-types
      - ADMINER_DESIGN=nette
    ports:
      - "${ADMINER_PORTS}"
    networks:
      - pgnetwork

  app:
    container_name: app
    build: .
    restart: unless-stopped
    command: uvicorn app.main:app --host ${API_HOST} --port ${API_PORT}
    depends_on:
      - wine_host
      - minio
    ports:
      - ${API_PORT}:${API_PORT}
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      WEB_PORT: ${API_PORT}
      WEB_HOST: ${API_HOST}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_URL: ${MINIO_URL}
      MINIO_BUCKET: ${MINIO_BUCKET}
    volumes:
      - ./templates:/app/templates
      - ./migration_volume:/app/app/migration/versions
    networks:
      - pgnetwork

networks:
  pgnetwork:
    driver: bridge

volumes:
  migration_volume: # alembic migrations
  pg_data: # postgresql data
  pg_dump: # postgres dump/restore
  minio_data: