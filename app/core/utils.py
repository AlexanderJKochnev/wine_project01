# app/core/utils.py
# some useful utilits

from pathlib import Path
from typing import Dict, List
from sqlalchemy.orm import selectinload
# from sqlalchemy.orm.util import AliasedClass
from sqlalchemy.sql.selectable import Select
from sqlalchemy.orm import DeclarativeMeta


def get_path_to_root(name: str = '.env'):
    """
        get path to fiile in root directory
    """
    for k in range(5):
        env_path = Path(__file__).resolve().parents[k] / name
        if env_path.exists():
            break
    else:
        env_path = None
        raise Exception('environment file is not found')
    return env_path


def get_searchable_fields(model: type) -> Dict[str, type]:
    """
    –°–õ–û–í–ê–†–¨ –ü–û–õ–ï–ô –ü–û –ö–û–¢–û–†–´–ú –ú–û–ñ–ù–û –û–°–£–©–ï–í–õ–Ø–¢–¨ –ü–û–ò–°–ö
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: {field_name: field_type}
    –≤–∫–ª—é—á–∞—è:
    - –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è –º–æ–¥–µ–ª–∏
    - –ø–æ–ª—è –∏–∑ relationships –≤ —Ñ–æ—Ä–º–∞—Ç–µ: rel_name_field_name
    """
    mapper = model.__mapper__
    fields = {}

    # 1. –ü—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è
    for column in mapper.columns:
        if column.primary_key or not hasattr(column.type, "python_type"):
            continue
        fields[column.name] = column.type.python_type

    # 2. –ü–æ–ª—è –∏–∑ relationships
    for rel_name, relationship in mapper.relationships.items():
        if relationship.uselist:  # one-to-many ‚Äî –∏—â–µ–º –ø–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–∏—Å–∫–∏, –∏—â–µ–º —Ç–æ–ª—å–∫–æ many-to-one / one-to-one

        remote_model = relationship.entity.entity
        remote_mapper = remote_model.__mapper__

        for col in remote_mapper.columns:
            if col.primary_key:
                continue
            field_name = f"{rel_name}_{col.name}"
            fields[field_name] = col.type.python_type

    return fields


def apply_relationship_loads(stmt: Select, model: DeclarativeMeta) -> Select:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç .options(selectinload(...)) –¥–ª—è –≤—Å–µ—Ö many-to-one relationships.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º —á—Ç–µ–Ω–∏–∏.
    """
    mapper = model.__mapper__
    for rel_name, relationship in mapper.relationships.items():
        if relationship.uselist:
            continue  # skip one-to-many (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        stmt = stmt.options(selectinload(getattr(model, rel_name)))
    return stmt


#  —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–ª–Ω—ã –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤—Å–µ–≥–¥–∞ (–∫–æ—Å—Ç—ã–ª—å)
white_list: list = ['count_drink']


def get_model_fields_info(model, schema_type: int = 0, include_list: list = white_list) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—è—Ö –º–æ–¥–µ–ª–∏:
    - field_type: —Ç–∏–ø –ø–æ–ª—è
    - nullable: –º–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å NULL (bool)
    - primary_key: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤–∏—á–Ω—ã–º –∫–ª—é—á–æ–º (bool)
    - foreign: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–Ω–µ—à–Ω–∏–º –∫–ª—é—á–æ–º (bool)
    - has_default: –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (bool)
    - # default_value: —Å–∞–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
    schema_type:
    Read (0):   –≤—Å–µ –ø–æ–ª—è –∫—Ä–æ–º–µ _id, pk, default_value
    Create (1): –≤—Å–µ –ø–æ–ª—è –∫—Ä–æ–º–µ _id, pk, default_value, foreign
    Update (2): –≤—Å–µ –ø–æ–ª—è –∫—Ä–æ–º–µ _id, pk, default_value, foreign | –≤—Å–µ –ø–æ–ª—è optional
    include_list: –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    """
    defval, pk, _id, foreign, updatable = False, False, False, True, True,
    match schema_type:
        case 0:  # Read
            pk, _id, defval, foreign = True, True, True, False
        case 1:  # Create
            pk, defval, foreign = True, True, False
        case 2:  # Update
            pk, defval, foreign, updatable = True, True, False, False
        case _:  # All
            pass

    fields_info = {}

    # 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ __table__
    if hasattr(model, "__table__") and model.__table__ is not None:
        for col in model.__table__.columns:
            field_type = getattr(col.type, "python_type", None)
            if field_type is None:
                field_type = type(col.type)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            has_default = False
            # default_value = None

            if col.default is not None:
                has_default = True
                # if col.default.is_scalar:
                #     default_value = col.default.arg
                # elif col.default.is_callable:
                #     default_value = f"<callable: {col.default.callable.__name__}>"
            elif col.server_default is not None:
                has_default = True
                # default_value = f"<server_default: {str(col.server_default)}>"
            # defval, pk, _id, foreign, updatable
            if all((pk, col.primary_key, col.name not in include_list)):
                continue
            if all((defval, has_default, col.name not in include_list)):
                continue
            if all((_id, col.name.endswith('_id'), col.name not in include_list)):
                continue
            xnullable = col.nullable if updatable else True
            fields_info[col.name] = {'field_type': field_type,
                                     'nullable': xnullable,
                                     'primary_key': col.primary_key,
                                     'foreign': False,  # –≠—Ç–æ –Ω–µ foreign key
                                     'has_default': has_default}  # , default_value)
    # 2. Relationships —á–µ—Ä–µ–∑ –º–∞–ø–ø–µ—Ä
    if all((hasattr(model, "__mapper__"), foreign)):
        for rel in model.__mapper__.relationships:
            direction = rel.direction.name
            target = rel.entity.class_  # .__name__
            # print(f'{target=}, {type(target)=}')
            if direction == "ONETOMANY":
                field_type = List[{target}]
                is_nullable = True
            else:  # MANYTOONE
                field_type = target
                is_nullable = True
                for local_col in rel.local_columns:
                    if hasattr(local_col, "nullable"):
                        is_nullable = local_col.nullable
                        break
            xnullable = is_nullable if updatable else True
            fields_info[rel.key] = {'field_type': field_type,
                                    'nullable': xnullable,
                                    'primary_key': False,
                                    'foreign': True,  # –≠—Ç–æ foreign key
                                    'has_default': False}  # , default_value)

    return fields_info


def print_model_schema(model, title=None):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å—Ö–µ–º—É –º–æ–¥–µ–ª–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ.
    """
    # schema = generate_model_schema(model)
    name = title or model.__name__
    print(f"\nüìä –°—Ö–µ–º–∞ –º–æ–¥–µ–ª–∏: {name}")
    print("-" * 50)
    for field, info in model.items():
        type_str = info["type"]
        null_str = "NULL" if info["nullable"] else "NOT NULL"
        extra = ""
        if info.get("relation"):
            extra = f" üîó {info['direction']} ‚Üí {info['back_populates']}"
        if info.get("default"):
            extra += f" (default={info['default']})"
        print(f"{field:20} : {type_str:12} | {null_str:8}{extra}")
